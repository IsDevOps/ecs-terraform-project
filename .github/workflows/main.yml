
name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Apply or Destroy'
        options:
        - plan
        - apply
        - destroy
        required: true
        default: 'apply'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t oseghale1/flask-app:latest ./application
          docker push oseghale1/flask-app:latest

      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
          
            
      - name: Terraform Init          
        run: terraform init
          
        # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt
    
      - name: Terraform Validate          
        run: terraform validate

      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
        
  
      - name: Terraform Init
       
        run: terraform init
  
        
      - name: Terraform Plan
        if: ${{ github.event.inputs.action  == 'plan' }}
        
        # Generates an execution plan for Terraform
        run: |
          terraform plan -input=false
  
      
        # Apply the Terraform Configuration according to the parameter
      - name: Terraform Action
        if: ${{ github.event.inputs.action  == 'apply' }}
        
        run: terraform ${{ github.event.inputs.action }} -auto-approve -input=false
  
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        
        run: terraform ${{ github.event.inputs.action }} -auto-approve -input=false